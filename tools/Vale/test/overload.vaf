include{:fstar}{:open} "Types_s"

module Overload

var ok:bool {:state ok()};
var eax:int {:state reg(EAX)};
var ebx:int {:state reg(EBX)};
var efl:int {:state flags()};
var mem:int {:state mem()};

operand_type reg:int := inout eax | inout ebx;

#verbatim{:interface}
open FStar.Map
let map = Map.t
let op_String_Access = Map.sel
let op_String_Assignment = Map.upd
let contains = Map.contains

type register = | EAX | EBX

type va_bool = bool
type va_prop = Type0
type va_int = int
type va_int_at_least (k:int) = i:int{i >= k}
type va_int_at_most (k:int) = i:int{i <= k}
type va_int_range (k1 k2:int) = i:int{k1 <= i /\ i <= k2}
type ins = | IPlaceholder : int -> ins
type ocmp = | OLe: o1:register -> o2:register -> ocmp
type va_code =
  | Ins : ins:ins -> va_code
  | Block : block:va_codes -> va_code
  | IfElse : ifCond:ocmp -> ifTrue:va_code -> ifFalse:va_code -> va_code
and va_codes = list va_code

let va_CNil () = []
let va_CCons x y = x::y
let va_Block (block:va_codes) : Tot va_code = Block block
let va_IfElse (ifCond:ocmp) (ifTrue:va_code) (ifFalse:va_code) : va_code = IfElse ifCond ifTrue ifFalse
let va_get_block (c:va_code{Block? c}) : GTot va_codes = Block?.block c
let va_get_ifCond (c:va_code{IfElse? c}) : GTot ocmp = IfElse?.ifCond c
let va_get_ifTrue (c:va_code{IfElse? c}) : GTot va_code = IfElse?.ifTrue c
let va_get_ifFalse (c:va_code{IfElse? c}) : GTot va_code = IfElse?.ifFalse c

// REVIEW: FStar.Pervasives.reveal_opaque doesn't include zeta, so it fails for recursive functions
let va_reveal_opaque (s:string) = norm_spec [zeta; delta_only [s]]

type va_state = map register int
let va_get_ok (s:va_state) : GTot Type = True
let va_get_reg (r:register) (s:va_state) : GTot int = s.[r]
let va_update_ok (sM:va_state) (sK:va_state) : GTot va_state = sK
let va_update_reg (r:register) (sM:va_state) (sK:va_state) : GTot va_state = sK.[r] <- sM.[r]

type va_register = register
type va_operand_reg = register
let va_op_reg_reg (r:register) : Tot va_register = r
let va_is_src_reg (r:register) (s:va_state) = True
let va_is_dst_reg (r:register) (s:va_state) = True
let va_update_register (r:register) (sM:va_state) (sK:va_state) : GTot va_state = va_update_reg r sM sK
let va_eval_reg (s:va_state) (r:va_register) : GTot int = s.[r]

type va_cmp = register
let va_op_cmp_reg (r:va_register) : va_cmp = r
let va_cmp_le (a:va_register) (b:va_register) : ocmp = OLe a b

let va_state_eq (s0:va_state) (s1:va_state) : Type = s0.[EAX] = s1.[EAX] /\ s0.[EBX] = s1.[EBX]

type va_fuel = int

let va_require_total (b0:va_code) (c:va_code) (s0:va_state) : Type =
  b0 = c

let va_ensure_total (b0:va_code) (s0:va_state) (s1:va_state) (f1:va_fuel) : Type =
  True

unfold let disequality = op_disEquality
#endverbatim


#verbatim
let eval_ocmp (s:va_state) (c:ocmp) :bool =
  match c with
  | OLe r1 r2 -> s.[r1] <= s.[r2]

assume val va_lemma_empty_total : s0:va_state -> bN:va_codes -> Ghost ((sM:va_state) * (fM:va_fuel))
  (requires True)
  (ensures (fun (sM, fM) ->
    s0 == sM
  ))

assume val va_lemma_merge_total : b0:va_codes -> s0:va_state -> f0:va_fuel -> sM:va_state -> fM:va_fuel -> sN:va_state -> Ghost (fN:va_fuel)
  (requires
    Cons? b0
  )
  (ensures (fun fN ->
    True
  ))
#endverbatim

const True:prop extern;
const False:prop extern;

procedure Calls(in x:reg, in y:reg)
{
    let z := 0 < x \/ y > 0;
    let t := 0 < x /\ y > 0;
    let a := 1 +/**/3; // make sure that comments are parsed correctly
    let b := 1 +// make sure that comments are parsed correct
        3;
    assert (False ==> True);
    assert (True <== False);
    assert (if 2 <> 3 then True else False);
    assert (if 2 < 3 < 4 then True else False);
    assert ~False;
}
