include "common.vad"

#verbatim
predicate F(i:int)
predicate G(i:int)

lemma L(i:int)
    requires F(i)
    ensures  G(i)

module MyModule {
    type MyType = int

    ghost method MyMethod(b:bool) returns (y:int) { }
    function method MyFunction(x:int): int { x + x }
    type ParamType<G> = seq<G>
}
predicate va_is_src_register_MyModule__MyType(x:va_register, s:va_state) { true }
predicate va_is_dst_register_MyModule__MyType(x:va_register, s:va_state) { true }
function va_eval_register_MyModule__MyType(s:va_state, o:va_register):int { eval_reg(o, s) }

datatype MyRecord = MakeRecord(a:int, b:bool)
predicate va_is_src_operand_MyRecord(dt:va_operand, s:va_state)
function va_eval_operand_MyRecord(s:state, o:va_operand):MyRecord
#endverbatim

procedure{:instruction Ins(InsIncr(OOpr(OReg(x))))} Increment(inout register x:int)
    ensures
        x == old(x) + 1;
{
}

procedure P(
    inout register o:MyModule.MyType, inline k:int, ghost g:int,
    ghost eleven:MyModule.ParamType(int),
    ghost twelve:MyModule.ParamType(MyModule.MyType))
    requires
        @o != EAX;
        g >= 1;
        MyModule.MyFunction(5) == 10;
    ensures
        eax == old(eax) + 1;
        o == old(o) + 1;
        g >= 0;
    modifies
        eax;
{
    Increment(eax);
    Increment(o);
}

procedure Q(
    inline iii:MyModule.MyType,
    ghost g:int,
    ghost eleven:MyModule.ParamType(int),
    ghost twelve:MyModule.ParamType(MyModule.MyType),
    operand dt:MyRecord)
    requires
        F(eax + 3);
        g >= 0;
        MyModule.MyFunction(5) == 10;
        dt.a < 17;
    ensures
        G(eax);
    modifies
        eax; ebx;
{
    P(ebx, 10, 100, eleven, twelve);
    ghost var a1 := g + 1;
    ghost var a2 := eax;
    P(ebx, 20, a1, eleven, twelve);
    assert ebx == old(ebx) + 2;
    ghost var a3 := eax;
    ghost var a4 := old(eax);
    assert a3 == a2 + 1;
    assert a3 == a4 + 2;
    ghost if (a3 < 10)
    {
      a3 := a3 + 1;
    }
    ghost var u := MyModule.MyFunction(iii);
    ghost var y := MyModule.MyMethod(false);
    P(ebx, 30, a1 + a1, eleven, twelve);
    L(eax);
}
