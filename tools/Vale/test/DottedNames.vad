include "common.vad"

#verbatim
predicate F(i:int)
predicate G(i:int)

lemma L(i:int)
    requires F(i)
    ensures  G(i)

module MyModule {
    type MyType = int

    ghost method MyMethod(b:bool) returns(y:int) { }
    function method MyFunction(x:int):int { x + x }
    type ParamType<G> = seq<G>
}
type va_operand_reg_MyModule__MyType = va_register
predicate va_is_src_reg_MyModule__MyType(x:va_register, s:va_state) { true }
predicate va_is_dst_reg_MyModule__MyType(x:va_register, s:va_state) { true }
function va_eval_reg_MyModule__MyType(s:va_state, o:va_register):int { eval_reg(o, s) }
function method va_coerce_reg_MyModule__MyType_to_reg(r:va_register):va_register { r }
function va_update_operand_reg_MyModule__MyType(r:register, sM:va_state, sK:va_state):va_state { va_update_reg(r, sM, sK) }
function method va_op_reg_MyModule__MyType_reg(r:register):va_register { r }

datatype MyRecord = MakeRecord(a:int, b:bool)
type va_operand_opr_MyRecord = va_operand
predicate va_is_src_opr_MyRecord(dt:va_operand, s:va_state)
function va_eval_opr_MyRecord(s:state, o:va_operand):MyRecord
#endverbatim

type MyRecord:Type(0) extern;
type MyModule.MyType:Type(0) := int;
type MyModule.ParamType(G:Type(0)):Type(0) := seq(G);
function operator(.a)(r:MyRecord):int extern;
function operator(.b)(r:MyRecord):bool extern;
function F(i:int):bool extern;
function G(i:int):bool extern;
function MyModule.MyFunction(x:int):int extern;
ghost procedure L(ghost i:int) extern;
//TODO: ghost procedure MyModule.MyMethod(ghost b:bool) returns(y:int) extern;
function MyModule.MyMethod(b:bool):int extern;
operand_type reg_MyModule.MyType:int @ register := reg;
operand_type opr_MyRecord:MyRecord;

procedure Increment(inout x:reg)
    {:instruction Ins(InsIncr(OOpr(OReg(x))))}
    ensures
        x == old(x) + 1;
{
}

procedure P(
    // inout o:reg_MyModule.MyType, // REVIEW: this isn't supported (reg <: reg_MyModule.MyType, not the other way around), but we could loosen the rules to allow it
    inout o:reg,
    inline k:int,
    ghost g:int,
    ghost eleven:MyModule.ParamType(int),
    ghost twelve:MyModule.ParamType(MyModule.MyType))
    requires
        @o != EAX;
        g >= 1;
        MyModule.MyFunction(5) == 10;
    ensures
        eax == old(eax) + 1;
        o == old(o) + 1;
        g >= 0;
    modifies
        eax;
{
    Increment(eax);
    Increment(o);
}

procedure Q(
    inline iii:MyModule.MyType,
    ghost g:int,
    ghost eleven:MyModule.ParamType(int),
    ghost twelve:MyModule.ParamType(MyModule.MyType),
    in dt:opr_MyRecord)
    requires
        F(eax + 3);
        g >= 0;
        MyModule.MyFunction(5) == 10;
        dt.a < 17;
    ensures
        G(eax);
    modifies
        eax; ebx;
{
    P(ebx, 10, 100, eleven, twelve);
    let a1 := g + 1;
    let a2 := eax;
    P(ebx, 20, a1, eleven, twelve);
    assert ebx == old(ebx) + 2;
    ghost var a3 := eax;
    let a4 := old(eax);
    assert a3 == a2 + 1;
    assert a3 == a4 + 2;
    ghost if (a3 < 10)
    {
        a3 := a3 + 1;
    }
    let u := MyModule.MyFunction(iii);
    let y := MyModule.MyMethod(false);
    P(ebx, 30, a1 + a1, eleven, twelve);
    L(eax);
}
