include "common.vad"

procedure Imm(out x:reg, inline y:int)
    {:instruction Ins(InsImm(x, y))}
    ensures
        x == y;
{
}

procedure Increment(inout x:mem_opr)
    {:instruction Ins(InsIncr(x))}
    ensures
        x == old(x) + 1;
{
}

procedure Add(inout x:reg, in y:opr)
    {:instruction Ins(InsAdd(x, y))}
    ensures
        x == old(x + y);
{
}

procedure Mem_in(in base:reg, inline offset:int) returns(o:mem_opr)
    {:operand}
    reads
        mem;
/* not yet needed (currently handled by va_is_src_mem_operand_int, etc.):
    requires
        mem?[base + offset];
    ensures
        o == mem[base + offset];
*/
    extern;

procedure Mem_out(in base:reg, inline offset:int, in o:mem_opr)
    {:operand}
    modifies
        mem;
/* not yet needed (currently handled by va_is_dst_mem_operand_int, etc.):
    requires
        mem?[base + offset];
    ensures
        mem == old(mem)[base + offset := o];
*/
    extern;

#verbatim
function method va_opr_code_Mem(base:va_register, offset:int):va_mem_operand { OMem(base, offset) }
function method va_opr_lemma_Mem(s:va_state, base:va_register, offset:int):va_mem_operand { OMem(base, offset) }
#endverbatim

procedure AddReg(inout x:reg, in y:reg)
    ensures
        x == old(x + y);
{
    Add(x, y); // coerces y from register to operand
}

procedure p()
    modifies
        eax;
        mem;
    requires
        eax >= 0;
        mem?[eax + 12];
    ensures
        eax >= 2;
        mem?[old(eax + 12)];
        mem[old(eax + 12)] == old(mem[eax + 12]) + 1;
{
    Increment(eax);
    Increment(eax);
    Increment(Mem(eax, 10));
}

procedure pp()
    {:frame false} // ==> no reads/modifies needed
    requires
        ok;
        eax >= 0;
        mem?[eax + 12];
{
    p();
}

#verbatim
function method Double(x:int):int { x + x }
type pos = i:nat | i > 0 witness 1
#endverbatim
function Double(x:int):int extern;
function le(x:int, y:int):bool extern;

procedure Calls()
    modifies
        eax; ebx;
    ensures
        eax == old(eax) + 10;
{
    Increment(eax);
    Add(eax, 3);
    Add(eax, 2 + Double(1));
    Imm(ebx, Double(1));
    assert ebx == 2;
    Add(eax, ebx);
}

procedure Ghosts(ghost g1:int) returns(ghost g2:int)
    ensures
        g2 == g1 + 1;
{
    g2 := g1 + 1;
}

procedure Ifs(inline i:int, ghost g:pos)
    lets
        g1 := g + 1;
        a @= eax;
    lets
        gdiv := 100 / g;
        b @= ebx;
        g2 := g1 + 1;
        g3 := a;
    modifies
        eax; b;
    requires
        g < eax;
        g < a;
        g2 == g + 2;
        gdiv != 7;
    ensures
        i < 10 ==> eax == old(eax) + i;
        1 <= ebx <= 3;
        1 <= b <= 3;
        eax <= old(ebx) ==> ebx == 1;
        g2 == g + 2;
{
    assert g2 == g + 2;
    assert a == eax;
    (let h) := Ghosts(g);
    let hh := Ghosts(g);
    let (hhh) := Ghosts(g);
    ghost var hhhh:int;
    hhhh := Ghosts(g);
    ghost if (eax < ebx)
    {
        assert eax <= ebx;
        assert g < ebx;
        assert h <= ebx;
    }
    else if (eax <= 10)
    {
        assert eax >= ebx;
    }

    inline if (i < 10)
    {
        Add(eax, i);
    }
    else
    {
        let a := eax;
        Add(eax, 10);
        assert eax == a + 10;
    }

    if (a <= b)
    {
        let a @= b;
Imm(ebx, 1); //TODO: typeheck:        Imm(a, 1); // Imm(ebx, 1);
        assert ebx == 1;
    }
    else if (le(eax, 10)) // same as "eax <= 10"
    {
        Imm(ebx, 2);
    }
    else
    {
        Imm(ebx, 3);
    }
    assert a == eax;
    assert b == ebx;
}

procedure Whiles()
    modifies
        eax; ebx;
    ensures
        ebx == old(ebx) + 100;
{
    Imm(eax, 0);
    while (eax <= 9)
        invariant
            0 <= eax <= 10;
            ebx == old(ebx) + 10 * eax;
        decreases 10 - eax;
    {
        Add(eax, 1);
        Add(ebx, 10);
    }
}
