#verbatim
type uint32 = x:int | 0 <= x < 0x1_0000_0000
#endverbatim

var{:state ok()} ok:bool;
var{:state reg(EAX)} eax:uint32;
var{:state reg(EBX)} ebx:uint32;
var{:state reg(ECX)} ecx:uint32;
var{:state reg(EDX)} edx:uint32;
var{:state reg(ESI)} esi:uint32;
var{:state reg(EDI)} edi:uint32;
var{:state reg(EBP)} ebp:uint32;
var{:state flags()} efl:uint32;
var{:state mem()} mem:map(int, uint32);

#verbatim

datatype reg = EAX | EBX | ECX | EDX | ESI | EDI | EBP

datatype opr = OReg(r:reg) | OConst(n:uint32)
type va_operand = opr
function method va_op_operand_reg(r:reg):va_operand { OReg(r) }
predicate va_is_src_operand_uint32(o:opr, s:va_state) { true }
predicate va_is_dst_operand_uint32(o:opr, s:va_state) { o.OReg? }

type va_bool = bool
type va_int = int
datatype va_codes = va_CNil() | va_CCons(hd:va_code, tl:va_codes)

type code
datatype va_code = va_Block(block:va_codes) | Other(c:code)

function method Ins_Load(dst:opr, ptr:opr, offset:int):va_code
function method Ins_Store(ptr:opr, src:opr, offset:int):va_code

datatype state = State(ok:bool, regs:map<reg, uint32>, mem:map<int, uint32>)
type va_state = state
function va_get_ok(s:va_state):bool { s.ok }
function va_get_reg(r:reg, s:va_state):uint32 requires r in s.regs { s.regs[r] }
function va_get_mem(s:va_state):map<int, uint32> { s.mem }

function va_update_ok(sM:va_state, sK:va_state):va_state { sK.(ok := sM.ok) }
function va_update_reg(r:reg, sM:va_state, sK:va_state):va_state requires r in sM.regs { sK.(regs := sK.regs[r := sM.regs[r]]) }
function va_update_mem(sM:va_state, sK:va_state):va_state { sK.(mem := sM.mem) }

function va_update_operand(o:opr, sM:va_state, sK:va_state):va_state
    requires o.OReg?
    requires o.r in sM.regs
{
    match o
        case OReg(r) => va_update_reg(r, sM, sK)
}

predicate va_state_eq(s0:va_state, s1:va_state)
{
    s0.ok == s1.ok
 && s0.regs == s1.regs
 && s0.mem == s1.mem
}

function va_get_block(c:va_code):va_codes requires c.va_Block? { c.block }

predicate eval_code(c:va_code, s0:state, sN:state)
function va_eval_operand_uint32(s:state, o:va_operand):uint32
    requires o.OReg? ==> o.r in s.regs
{
    match o
        case OReg(r) => s.regs[r]
        case OConst(n) => n
}

predicate va_require(block0:va_codes, c:va_code, s0:va_state, sN:va_state)
{
    block0.va_CCons?
 && block0.hd == c
 && eval_code(va_Block(block0), s0, sN)
 && (forall r:reg :: r in s0.regs)
}

predicate va_ensure(b0:va_codes, b1:va_codes, s0:va_state, s1:va_state, sN:va_state)
{
    b0.va_CCons?
 && b0.tl == b1
 && eval_code(b0.hd, s0, s1)
 && eval_code(va_Block(b1), s1, sN)
 && (forall r:reg :: r in s1.regs)
}

lemma va_lemma_block(b0:va_codes, s0:state, sN:state) returns(s1:state, c1:va_code, b1:va_codes)
    requires b0.va_CCons?
    requires eval_code(va_Block(b0), s0, sN)
    ensures  b0 == va_CCons(c1, b1)
    ensures  eval_code(c1, s0, s1)
    ensures  eval_code(va_Block(b1), s1, sN)

lemma va_lemma_empty(s0:va_state, sN:va_state) returns(sM:va_state)
    requires eval_code(va_Block(va_CNil()), s0, sN)
    ensures  s0 == sM == sN

predicate inMem(ptr:int, mem:map<int, uint32>) { ptr in mem }

predicate wordsInMem(ptr:int, size:int, mem:map<int, uint32>)
{
    forall i :: 0 <= i < size && i % 4 == 0 ==> ptr + i in mem
}

#endverbatim

// TODO: memory operands
procedure{:refined}{:instruction Ins_Load(dst, ptr, offset)} Load(out operand dst:uint32, operand ptr:uint32, inline offset:int)
    requires
        inMem(ptr + offset, mem);
    reads
        mem;
    ensures
        dst == mem[ptr + offset];
{
  ghost var addr := old(ptr) + offset; // TODO: old(ptr) should just be ptr
  ghost var pre := va_s0.ok && inMem(addr, va_s0.mem);
  assume pre ==> va_sM == va_s0.(regs := va_s0.regs[@dst.r := va_s0.mem[addr]]);
  assume !pre ==> va_sM == va_s0.(ok := false);
}

procedure{:refined}{:instruction Ins_Store(ptr, src, offset)} Store(operand ptr:uint32, operand src:uint32, inline offset:int)
    requires
        inMem(ptr + offset, mem);
    modifies
        mem;
    ensures
        mem == old(mem)[ptr + offset := old(src)];
{
  ghost var addr := old(ptr) + offset; // TODO: old(ptr) should just be ptr
  ghost var pre := va_s0.ok && inMem(addr, va_s0.mem);
  assume pre ==> va_sM == va_s0.(mem := va_s0.mem[addr := old(src)]); // TODO: old(src) should just be src
  assume !pre ==> va_sM == va_s0.(ok := false);
}

procedure{:refined} LoadWrapper(out operand dst:uint32, operand ptr:uint32, inline offset:int)
    requires
        inMem(ptr + offset, mem);
    reads
        mem;
    ensures
        dst == mem[ptr + offset];
{
  Load(dst, ptr, offset);
}

procedure{:refined} StoreWrapper(operand ptr:uint32, operand src:uint32, inline offset:int)
    requires
        inMem(ptr + offset, mem);
    modifies
        mem;
    ensures
        mem == old(mem)[ptr + offset := old(src)];
{
  Store(ptr, src, offset);
}

procedure{:refined} Copy64()
    requires/ensures
        wordsInMem(esi, 64, mem);
        wordsInMem(edi, 64, mem);
        esi + 64 <= edi || edi + 64 <= esi;
    ensures
        forall i :: 0 <= i < 64 && i % 4 == 0 ==> mem[edi + i] == mem[esi + i];
    reads
        esi; edi;
    modifies
        eax; ebx; ecx; edx; ebp;
        mem;
{
    Load(eax, esi, 0);
    Load(ebx, esi, 4);
    Load(ecx, esi, 8);
    Load(edx, esi, 12);
    Load(ebp, esi, 16);
    Store(edi, eax, 0);
    Store(edi, ebx, 4);
    Store(edi, ecx, 8);
    Store(edi, edx, 12);
    Store(edi, ebp, 16);
    Load(eax, esi, 20);
    Load(ebx, esi, 24);
    Load(ecx, esi, 28);
    LoadWrapper(edx, esi, 32);
    Load(ebp, esi, 36);
    Store(edi, eax, 20);
    Store(edi, ebx, 24);
    Store(edi, ecx, 28);
    Store(edi, edx, 32);
    Store(edi, ebp, 36);
    Load(eax, esi, 40);
    Load(ebx, esi, 44);
    Load(ecx, esi, 48);
    Load(edx, esi, 52);
    Load(ebp, esi, 56);
    Store(edi, eax, 40);
    StoreWrapper(edi, ebx, 44);
    Store(edi, ecx, 48);
    Store(edi, edx, 52);
    Store(edi, ebp, 56);
    Load(eax, esi, 60);
    Store(edi, eax, 60);
}

procedure{:refined} Copy8(inout operand tmp1:uint32, inout operand tmp2:uint32)
    requires{:refined false}
        @tmp1 == OReg(EAX) || @tmp1 == OReg(ECX);
        @tmp2 == OReg(EBX) || @tmp2 == OReg(EDX);
    requires/ensures
        wordsInMem(esi, 8, mem);
        wordsInMem(edi, 8, mem);
        esi + 8 <= edi || edi + 8 <= esi;
    ensures
        forall i :: 0 <= i < 8 && i % 4 == 0 ==> mem[edi + i] == mem[esi + i];
    reads
        esi; edi;
    modifies
        mem;
{
    Load(tmp1, esi, 0);
    Load(tmp2, esi, 4);
    Store(edi, tmp1, 0);
    Store(edi, tmp2, 4);
}

/*
procedure{:refined} Copy128()
    requires/ensures
        wordsInMem(esi, 128, mem);
        wordsInMem(edi, 128, mem);
        esi + 128 <= edi || edi + 128 <= esi;
    ensures
        forall i :: 0 <= i < 128 && i % 4 == 0 ==> mem[edi + i] == mem[esi + i];
    reads
        esi; edi;
    modifies
        eax; ebx; ecx; edx; ebp;
        mem;
{
    Load(eax, esi, 0);
    Load(ebx, esi, 4);
    Load(ecx, esi, 8);
    Load(edx, esi, 12);
    Load(ebp, esi, 16);
    Store(edi, eax, 0);
    Store(edi, ebx, 4);
    Store(edi, ecx, 8);
    Store(edi, edx, 12);
    Store(edi, ebp, 16);
    Load(eax, esi, 20);
    Load(ebx, esi, 24);
    Load(ecx, esi, 28);
    Load(edx, esi, 32);
    Load(ebp, esi, 36);
    Store(edi, eax, 20);
    Store(edi, ebx, 24);
    Store(edi, ecx, 28);
    Store(edi, edx, 32);
    Store(edi, ebp, 36);
    Load(eax, esi, 40);
    Load(ebx, esi, 44);
    Load(ecx, esi, 48);
    Load(edx, esi, 52);
    Load(ebp, esi, 56);
    Store(edi, eax, 40);
    Store(edi, ebx, 44);
    Store(edi, ecx, 48);
    Store(edi, edx, 52);
    Store(edi, ebp, 56);
    Load(eax, esi, 60);
    Load(ebx, esi, 64);
    Load(ecx, esi, 68);
    Load(edx, esi, 72);
    Load(ebp, esi, 76);
    Store(edi, eax, 60);
    Store(edi, ebx, 64);
    Store(edi, ecx, 68);
    Store(edi, edx, 72);
    Store(edi, ebp, 76);
    Load(eax, esi, 80);
    Load(ebx, esi, 84);
    Load(ecx, esi, 88);
    Load(edx, esi, 92);
    Load(ebp, esi, 96);
    Store(edi, eax, 80);
    Store(edi, ebx, 84);
    Store(edi, ecx, 88);
    Store(edi, edx, 92);
    Store(edi, ebp, 96);
    Load(eax, esi, 100);
    Load(ebx, esi, 104);
    Load(ecx, esi, 108);
    Load(edx, esi, 112);
    Load(ebp, esi, 116);
    Store(edi, eax, 100);
    Store(edi, ebx, 104);
    Store(edi, ecx, 108);
    Store(edi, edx, 112);
    Store(edi, ebp, 116);
    Load(eax, esi, 120);
    Load(ebx, esi, 124);
    Store(edi, eax, 120);
    Store(edi, ebx, 124);
}
*/
