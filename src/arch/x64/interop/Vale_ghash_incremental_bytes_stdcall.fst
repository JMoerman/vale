module Vale_ghash_incremental_bytes_stdcall

open X64.Machine_s
open X64.Memory_i
open X64.Vale.State_i
open X64.Vale.Decls_i
open Types_s
open GCTR_s
open GCM_helpers_i
open GHash_i
open X64.GHash

val va_code_ghash_incremental_bytes_stdcall: unit -> va_code
let va_code_ghash_incremental_bytes_stdcall = X64.GHash.va_code_ghash_incremental_bytes_stdcall 

//TODO: Fill this
  //va_pre and va_post should correspond to the pre- and postconditions generated by Vale
let va_pre (va_b0:va_code) (va_s0:va_state)
(h_b:buffer128) (hash_b:buffer128) (input_b:buffer128) (num_bytes:nat64)  =
((va_require_total va_b0 (va_code_ghash_incremental_bytes_stdcall ()) va_s0) /\
    (va_get_ok va_s0) /\ (locs_disjoint [(loc_buffer h_b); (loc_buffer hash_b); (loc_buffer
    input_b)]) /\ (buffer_readable (va_get_mem va_s0) h_b) /\ (buffer_readable (va_get_mem va_s0)
    hash_b) /\ (validSrcAddrs128 (va_get_mem va_s0) (va_get_reg rdx va_s0) input_b
    (bytes_to_quad_size num_bytes)) /\ (num_bytes > 0 ==> (va_get_reg rdx va_s0) + 16 `op_Multiply`
    (bytes_to_quad_size num_bytes) < pow2_64) /\ (num_bytes > 0 ==> (buffer_length input_b) ==
    (bytes_to_quad_size num_bytes)) /\ (va_get_reg rdi va_s0) == (buffer_addr h_b (va_get_mem
    va_s0)) /\ (va_get_reg rsi va_s0) == (buffer_addr hash_b (va_get_mem va_s0)) /\ (va_get_reg rdx
    va_s0) == (buffer_addr input_b (va_get_mem va_s0)) /\ (va_get_reg rcx va_s0) == num_bytes /\
    (buffer_length h_b) > 0 /\ (buffer_length hash_b) > 0)

let va_post (va_b0:va_code) (va_s0:va_state) (va_sM:va_state) (va_fM:va_fuel)
  (h_b:buffer128) (hash_b:buffer128) (input_b:buffer128) (num_bytes:nat64)  =
  ((va_ensure_total va_b0 va_s0 va_sM va_fM) /\ (va_get_ok va_sM)
    /\ (modifies_mem (loc_buffer hash_b) (va_get_mem va_s0) (va_get_mem va_sM)) /\ (buffer_readable
    (va_get_mem va_sM) h_b) /\ (buffer_readable (va_get_mem va_sM) hash_b) /\ (buffer_readable
    (va_get_mem va_sM) input_b) /\ (va_get_reg rbx va_sM) == (va_get_reg rbx va_s0) /\ (va_get_reg
    rbp va_sM) == (va_get_reg rbp va_s0) /\ (va_get_reg r12 va_sM) == (va_get_reg r12 va_s0) /\
    (va_get_reg r13 va_sM) == (va_get_reg r13 va_s0) /\ (va_get_reg r14 va_sM) == (va_get_reg r14
    va_s0) /\ (va_get_reg r15 va_sM) == (va_get_reg r15 va_s0) /\ (num_bytes == 0 ==>
    (buffer128_read hash_b 0 (va_get_mem va_sM)) == (buffer128_read hash_b 0 (va_get_mem va_s0)))
    /\ (let input_bytes = (slice_work_around (le_seq_quad32_to_bytes (buffer128_as_seq (va_get_mem
    va_sM) input_b)) num_bytes) in let padded_bytes = (pad_to_128_bits input_bytes) in let
    input_quads = (le_bytes_to_seq_quad32 padded_bytes) in let h = (buffer128_read h_b 0
    (va_get_mem va_s0)) in let old_io = (buffer128_read hash_b 0 (va_get_mem va_s0)) in let io =
    (buffer128_read hash_b 0 (va_get_mem va_sM)) in num_bytes > 0 ==> (l_and ((Seq.length input_quads)
    > 0) (io == (ghash_incremental h old_io input_quads)))) /\ (va_state_eq va_sM (va_update_mem
    va_sM (va_update_flags va_sM (va_update_xmm 15 va_sM (va_update_xmm 14 va_sM (va_update_xmm 13
    va_sM (va_update_xmm 12 va_sM (va_update_xmm 11 va_sM (va_update_xmm 10 va_sM (va_update_xmm 9
    va_sM (va_update_xmm 8 va_sM (va_update_xmm 7 va_sM (va_update_xmm 6 va_sM (va_update_xmm 5
    va_sM (va_update_xmm 4 va_sM (va_update_xmm 3 va_sM (va_update_xmm 2 va_sM (va_update_xmm 1
    va_sM (va_update_xmm 0 va_sM (va_update_reg r15 va_sM (va_update_reg r14 va_sM (va_update_reg
    r13 va_sM (va_update_reg r12 va_sM (va_update_reg r11 va_sM (va_update_reg r10 va_sM
    (va_update_reg r9 va_sM (va_update_reg r8 va_sM (va_update_reg rsp va_sM (va_update_reg rbp
    va_sM (va_update_reg rdi va_sM (va_update_reg rsi va_sM (va_update_reg rdx va_sM (va_update_reg
    rcx va_sM (va_update_reg rbx va_sM (va_update_reg rax va_sM (va_update_ok va_sM
    va_s0)))))))))))))))))))))))))))))))))))))

val va_lemma_ghash_incremental_bytes_stdcall(va_b0:va_code) (va_s0:va_state)
  (h_b:buffer128) (hash_b:buffer128) (input_b:buffer128) (num_bytes:nat64) : Ghost ((va_sM:va_state) * (va_fM:va_fuel))
  (requires va_pre va_b0 va_s0 h_b hash_b input_b num_bytes )
  (ensures (fun (va_sM, va_fM) -> va_post va_b0 va_s0 va_sM va_fM h_b hash_b input_b num_bytes ))

let va_lemma_ghash_incremental_bytes_stdcall = va_lemma_ghash_incremental_bytes_stdcall
