module Vale_reverse_bytes_quad32_buffer

open X64.Machine_s
open X64.Memory_i
open X64.Vale.State_i
open X64.Vale.Decls_i
open X64.Util
open Types_s

val va_code_reverse_bytes_quad32_buffer: unit -> va_code
let va_code_reverse_bytes_quad32_buffer = va_code_reverse_bytes_quad32_buffer

//TODO: Fill this
  //va_pre and va_post should correspond to the pre- and postconditions generated by Vale
let va_pre (va_b0:va_code) (va_s0:va_state)
(b:buffer128)  =
 ((va_require_total va_b0 (va_code_reverse_bytes_quad32_buffer ()) va_s0) /\ (va_get_ok
    va_s0) /\ (buffer_readable (va_get_mem va_s0) b) /\ (va_get_reg rdi va_s0) == (buffer_addr b
    (va_get_mem va_s0)) /\ (buffer_length b) == 1)

let va_post (va_b0:va_code) (va_s0:va_state) (va_sM:va_state) (va_fM:va_fuel)
(b:buffer128)  =
((va_ensure_total va_b0 va_s0 va_sM va_fM) /\ (va_get_ok va_sM)
    /\ (va_get_reg rbx va_sM) == (va_get_reg rbx va_s0) /\ (va_get_reg rbp va_sM) == (va_get_reg
    rbp va_s0) /\ (va_get_reg r12 va_sM) == (va_get_reg r12 va_s0) /\ (va_get_reg r13 va_sM) ==
    (va_get_reg r13 va_s0) /\ (va_get_reg r14 va_sM) == (va_get_reg r14 va_s0) /\ (va_get_reg r15
    va_sM) == (va_get_reg r15 va_s0) /\ (modifies_buffer128 b (va_get_mem va_s0) (va_get_mem
    va_sM)) /\ (buffer128_read b 0 (va_get_mem va_sM)) == (reverse_bytes_quad32 (buffer128_read b 0
    (va_get_mem va_s0))) /\ (va_state_eq va_sM (va_update_mem va_sM (va_update_flags va_sM
    (va_update_xmm 15 va_sM (va_update_xmm 14 va_sM (va_update_xmm 13 va_sM (va_update_xmm 12 va_sM
    (va_update_xmm 11 va_sM (va_update_xmm 10 va_sM (va_update_xmm 9 va_sM (va_update_xmm 8 va_sM
    (va_update_xmm 7 va_sM (va_update_xmm 6 va_sM (va_update_xmm 5 va_sM (va_update_xmm 4 va_sM
    (va_update_xmm 3 va_sM (va_update_xmm 2 va_sM (va_update_xmm 1 va_sM (va_update_xmm 0 va_sM
    (va_update_reg r15 va_sM (va_update_reg r14 va_sM (va_update_reg r13 va_sM (va_update_reg r12
    va_sM (va_update_reg r11 va_sM (va_update_reg r10 va_sM (va_update_reg r9 va_sM (va_update_reg
    r8 va_sM (va_update_reg rsp va_sM (va_update_reg rbp va_sM (va_update_reg rdi va_sM
    (va_update_reg rsi va_sM (va_update_reg rdx va_sM (va_update_reg rcx va_sM (va_update_reg rbx
    va_sM (va_update_reg rax va_sM (va_update_ok va_sM va_s0)))))))))))))))))))))))))))))))))))))

val va_lemma_reverse_bytes_quad32_buffer(va_b0:va_code) (va_s0:va_state)
(b:buffer128) : Ghost ((va_sM:va_state) * (va_fM:va_fuel))
  (requires va_pre va_b0 va_s0 b )
  (ensures (fun (va_sM, va_fM) -> va_post va_b0 va_s0 va_sM va_fM b ))

let va_lemma_reverse_bytes_quad32_buffer = va_lemma_reverse_bytes_quad32_buffer
