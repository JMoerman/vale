module Vale_memcpy

open X64.Machine_s
open X64.Memory_i
open X64.Vale.State_i
open X64.Vale.Decls_i
open X64.Vale.InsBasic
open Test.Memcpy

val va_code_memcpy: unit -> va_code
let va_code_memcpy () = va_code_Copy16 Secret

//TODO: Fill this
  //va_pre and va_post should correspond to the pre- and postconditions generated by Vale
let vale_pre (t:taint) (va_b0:va_code) (va_s0:va_state)
(bdst:buffer64) (bsrc:buffer64) =
   ((va_require_total va_b0 (va_code_Copy16 t) va_s0) /\ (va_get_ok va_s0) /\
    (locs_disjoint [(loc_buffer bsrc); (loc_buffer bdst)]) /\ (buffer_readable (va_get_mem va_s0)
    bsrc) /\ (buffer_readable (va_get_mem va_s0) bdst) /\ (buffer_length bsrc) == 2 /\
    (buffer_length bdst) == 2 /\ (va_get_reg Rsi va_s0) == (buffer_addr bsrc (va_get_mem va_s0)) /\
    (va_get_reg Rdi va_s0) == (buffer_addr bdst (va_get_mem va_s0)) /\ (valid_taint_buf64 bsrc
    (va_get_mem va_s0) (va_get_memTaint va_s0) t) /\ (valid_taint_buf64 bdst (va_get_mem va_s0)
    (va_get_memTaint va_s0) t))

let va_pre = vale_pre Secret

let vale_post (t:taint) (va_b0:va_code) (va_s0:va_state) (va_sM:va_state) (va_fM:va_fuel)
  (bdst:buffer64) (bsrc:buffer64) =
 ((va_ensure_total va_b0 va_s0 va_sM va_fM) /\ (va_get_ok va_sM)
    /\ (locs_disjoint [(loc_buffer bsrc); (loc_buffer bdst)]) /\ (buffer_readable (va_get_mem
    va_sM) bsrc) /\ (buffer_readable (va_get_mem va_sM) bdst) /\ (buffer_length bsrc) == 2 /\
    (buffer_length bdst) == 2 /\ (va_get_reg Rsi va_sM) == (buffer_addr bsrc (va_get_mem va_sM)) /\
    (va_get_reg Rdi va_sM) == (buffer_addr bdst (va_get_mem va_sM)) /\ (forall i . 0 <= i && i < 2
    ==> (buffer64_read bdst i (va_get_mem va_sM)) == (buffer64_read bsrc i (va_get_mem va_sM))) /\
    (modifies_mem (loc_buffer bdst) (va_get_mem va_s0) (va_get_mem va_sM)) /\ (va_state_eq va_sM
    (va_update_trace va_sM (va_update_mem va_sM (va_update_reg Rcx va_sM (va_update_reg Rax va_sM
    (va_update_ok va_sM va_s0)))))))

let va_post = vale_post Secret

val va_lemma_memcpy(va_b0:va_code) (va_s0:va_state)
  (dst:buffer64) (src:buffer64) : Ghost ((va_sM:va_state) * (va_fM:va_fuel))
  (requires va_pre va_b0 va_s0 dst src)
  (ensures (fun (va_sM, va_fM) -> va_post va_b0 va_s0 va_sM va_fM dst src))

let va_lemma_memcpy va_b0 va_s0 dst src = va_lemma_Copy16 va_b0 va_s0 Secret src dst
