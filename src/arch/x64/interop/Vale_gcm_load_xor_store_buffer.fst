module Vale_gcm_load_xor_store_buffer

open X64.Machine_s
open X64.Memory_i
open X64.Vale.State_i
open X64.Vale.Decls_i
open X64.Util
open AES_s
open GCTR_i
open GCTR_s

val va_code_gcm_load_xor_store_buffer: unit -> va_code
let va_code_gcm_load_xor_store_buffer = va_code_gcm_load_xor_store_buffer

//TODO: Fill this
  //va_pre and va_post should correspond to the pre- and postconditions generated by Vale
let va_pre (va_b0:va_code) (va_s0:va_state)
(plain_b:buffer128) (mask_b:buffer128) (cipher_b:buffer128) (offset:nat64) (num_blocks:(nat64)) (key:(aes_key_LE AES_128)) (iv:(quad32))  =
     (requires ((va_require_total va_b0 (va_code_gcm_load_xor_store_buffer ()) va_s0) /\ (va_get_ok
    va_s0) /\ (locs_disjoint [(loc_buffer plain_b); (loc_buffer mask_b); (loc_buffer cipher_b)]) /\
    (buffer_readable (va_get_mem va_s0) plain_b) /\ (buffer_readable (va_get_mem va_s0) mask_b) /\
    (buffer_readable (va_get_mem va_s0) cipher_b) /\ (va_get_reg rdi va_s0) == (buffer_addr plain_b
    (va_get_mem va_s0)) /\ (va_get_reg rsi va_s0) == (buffer_addr mask_b (va_get_mem va_s0)) /\
    (va_get_reg rdx va_s0) == (buffer_addr cipher_b (va_get_mem va_s0)) /\ (va_get_reg rcx va_s0)
    == offset /\ (buffer_length plain_b) >= num_blocks /\ (buffer_length cipher_b) ==
    (buffer_length plain_b) /\ (buffer_length mask_b) == 1 /\ (let mask = (buffer128_read mask_b 0
    (va_get_mem va_s0)) in let plain = (buffer128_as_seq (va_get_mem va_s0) plain_b) in let cipher
    = (buffer128_as_seq (va_get_mem va_s0) cipher_b) in offset < num_blocks /\ mask ==
    (aes_encrypt_BE AES_128 key (inc32 iv offset)) /\ (gctr_partial AES_128 offset plain cipher key
    iv))))
    
let va_post (va_b0:va_code) (va_s0:va_state) (va_sM:va_state) (va_fM:va_fuel)
  (plain_b:buffer128) (mask_b:buffer128) (cipher_b:buffer128) (offset:nat64) (num_blocks:(nat64)) (key:(aes_key_LE AES_128)) (iv:(quad32))  =
  va_pre va_b0 va_s0 plain_b mask_b cipher_b offset num_blocks key iv /\
  ((va_ensure_total va_b0 va_s0 va_sM va_fM) /\ (va_get_ok va_sM)
    /\ (va_get_reg rbx va_sM) == (va_get_reg rbx va_s0) /\ (va_get_reg rbp va_sM) == (va_get_reg
    rbp va_s0) /\ (va_get_reg r12 va_sM) == (va_get_reg r12 va_s0) /\ (va_get_reg r13 va_sM) ==
    (va_get_reg r13 va_s0) /\ (va_get_reg r14 va_sM) == (va_get_reg r14 va_s0) /\ (va_get_reg r15
    va_sM) == (va_get_reg r15 va_s0) /\ (modifies_buffer128 cipher_b (va_get_mem va_s0) (va_get_mem
    va_sM)) /\ (let mask = (buffer128_read mask_b 0 (va_get_mem va_s0)) in let plain =
    (buffer128_as_seq (va_get_mem va_sM) plain_b) in let old_cipher = (buffer128_as_seq (va_get_mem
    va_s0) cipher_b) in let cipher = (buffer128_as_seq (va_get_mem va_sM) cipher_b) in
    (gctr_partial AES_128 (offset + 1) plain cipher key iv) /\ (Seq.slice cipher 0 offset) == (Seq.slice
    old_cipher 0 offset)) /\ (va_state_eq va_sM (va_update_mem va_sM (va_update_flags va_sM
    (va_update_xmm 15 va_sM (va_update_xmm 14 va_sM (va_update_xmm 13 va_sM (va_update_xmm 12 va_sM
    (va_update_xmm 11 va_sM (va_update_xmm 10 va_sM (va_update_xmm 9 va_sM (va_update_xmm 8 va_sM
    (va_update_xmm 7 va_sM (va_update_xmm 6 va_sM (va_update_xmm 5 va_sM (va_update_xmm 4 va_sM
    (va_update_xmm 3 va_sM (va_update_xmm 2 va_sM (va_update_xmm 1 va_sM (va_update_xmm 0 va_sM
    (va_update_reg r15 va_sM (va_update_reg r14 va_sM (va_update_reg r13 va_sM (va_update_reg r12
    va_sM (va_update_reg r11 va_sM (va_update_reg r10 va_sM (va_update_reg r9 va_sM (va_update_reg
    r8 va_sM (va_update_reg rsp va_sM (va_update_reg rbp va_sM (va_update_reg rdi va_sM
    (va_update_reg rsi va_sM (va_update_reg rdx va_sM (va_update_reg rcx va_sM (va_update_reg rbx
    va_sM (va_update_reg rax va_sM (va_update_ok va_sM va_s0)))))))))))))))))))))))))))))))))))))

val va_lemma_gcm_load_xor_store_buffer(va_b0:va_code) (va_s0:va_state)
  (plain_b:buffer128) (mask_b:buffer128) (cipher_b:buffer128) (offset:nat64) (num_blocks:(nat64)) (key:(aes_key_LE AES_128)) (iv:(quad32)) : Ghost ((va_sM:va_state) * (va_fM:va_fuel))
  (requires va_pre va_b0 va_s0 plain_b mask_b cipher_b offset num_blocks key iv )
  (ensures (fun (va_sM, va_fM) -> va_post va_b0 va_s0 va_sM va_fM plain_b mask_b cipher_b offset num_blocks key iv ))

let va_lemma_gcm_load_xor_store_buffer = va_lemma_gcm_load_xor_store_buffer
