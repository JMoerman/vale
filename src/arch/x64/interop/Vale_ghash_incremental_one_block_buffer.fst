module Vale_ghash_incremental_one_block_buffer

open X64.Machine_s
open X64.Memory_i
open X64.Vale.State_i
open X64.Vale.Decls_i
open Words_s
open Types_s
open Types_i
open AES_s
open GHash_s
open GHash_i
open GF128_s
open GF128_i
open GCTR_s
open GCM_helpers_i
open X64.GHash
val va_code_ghash_incremental_one_block_buffer: unit -> va_code
let va_code_ghash_incremental_one_block_buffer = va_code_ghash_incremental_one_block_buffer

//TODO: Fill this
  //va_pre and va_post should correspond to the pre- and postconditions generated by Vale
let va_pre (va_b0:va_code) (va_s0:va_state)
(h_b:buffer128) (hash_b:buffer128) (input_b:buffer128) (offset:nat64)  = 
((va_require_total va_b0 (va_code_ghash_incremental_one_block_buffer ()) va_s0) /\
    (va_get_ok va_s0) /\ (locs_disjoint [(loc_buffer h_b); (loc_buffer hash_b); (loc_buffer
    input_b)]) /\ (buffer_readable (va_get_mem va_s0) h_b) /\ (buffer_readable (va_get_mem va_s0)
    hash_b) /\ (buffer_readable (va_get_mem va_s0) input_b) /\ (va_get_reg rdi va_s0) ==
    (buffer_addr h_b (va_get_mem va_s0)) /\ (va_get_reg rsi va_s0) == (buffer_addr hash_b
    (va_get_mem va_s0)) /\ (va_get_reg rdx va_s0) == (buffer_addr input_b (va_get_mem va_s0)) /\
    (va_get_reg rcx va_s0) == offset /\ (buffer_length input_b) >= offset + 1 /\ (buffer_length
    h_b) >= 1 /\ (buffer_length hash_b) >= 1)

let va_post (va_b0:va_code) (va_s0:va_state) (va_sM:va_state) (va_fM:va_fuel)
  (h_b:buffer128) (hash_b:buffer128) (input_b:buffer128) (offset:nat64)  =
((va_ensure_total va_b0 va_s0 va_sM va_fM) /\ (va_get_ok va_sM)
    /\ (va_get_reg rbx va_sM) == (va_get_reg rbx va_s0) /\ (va_get_reg rbp va_sM) == (va_get_reg
    rbp va_s0) /\ (va_get_reg r12 va_sM) == (va_get_reg r12 va_s0) /\ (va_get_reg r13 va_sM) ==
    (va_get_reg r13 va_s0) /\ (va_get_reg r14 va_sM) == (va_get_reg r14 va_s0) /\ (va_get_reg r15
    va_sM) == (va_get_reg r15 va_s0) /\ (modifies_buffer128 hash_b (va_get_mem va_s0) (va_get_mem
    va_sM)) /\ (let old_hash = (buffer128_read hash_b 0 (va_get_mem va_s0)) in let new_hash =
    (buffer128_read hash_b 0 (va_get_mem va_sM)) in let h_q = (buffer128_read h_b 0 (va_get_mem
    va_s0)) in let input_quad = (buffer128_read input_b offset (va_get_mem va_s0)) in new_hash ==
    (ghash_incremental h_q old_hash (Seq.create 1 input_quad))) /\ (va_state_eq va_sM (va_update_mem
    va_sM (va_update_flags va_sM (va_update_xmm 15 va_sM (va_update_xmm 14 va_sM (va_update_xmm 13
    va_sM (va_update_xmm 12 va_sM (va_update_xmm 11 va_sM (va_update_xmm 10 va_sM (va_update_xmm 9
    va_sM (va_update_xmm 8 va_sM (va_update_xmm 7 va_sM (va_update_xmm 6 va_sM (va_update_xmm 5
    va_sM (va_update_xmm 4 va_sM (va_update_xmm 3 va_sM (va_update_xmm 2 va_sM (va_update_xmm 1
    va_sM (va_update_xmm 0 va_sM (va_update_reg r15 va_sM (va_update_reg r14 va_sM (va_update_reg
    r13 va_sM (va_update_reg r12 va_sM (va_update_reg r11 va_sM (va_update_reg r10 va_sM
    (va_update_reg r9 va_sM (va_update_reg r8 va_sM (va_update_reg rsp va_sM (va_update_reg rbp
    va_sM (va_update_reg rdi va_sM (va_update_reg rsi va_sM (va_update_reg rdx va_sM (va_update_reg
    rcx va_sM (va_update_reg rbx va_sM (va_update_reg rax va_sM (va_update_ok va_sM
    va_s0)))))))))))))))))))))))))))))))))))))

val va_lemma_ghash_incremental_one_block_buffer(va_b0:va_code) (va_s0:va_state)
  (h_b:buffer128) (hash_b:buffer128) (input_b:buffer128) (offset:nat64) : Ghost ((va_sM:va_state) * (va_fM:va_fuel))
  (requires va_pre va_b0 va_s0 h_b hash_b input_b offset )
  (ensures (fun (va_sM, va_fM) -> va_post va_b0 va_s0 va_sM va_fM h_b hash_b input_b offset ))

let va_lemma_ghash_incremental_one_block_buffer = va_lemma_ghash_incremental_one_block_buffer
