#verbatim interface
module X64.Vale.Decls

// This interface should hide all of Semantics_s.
// (It should not refer to Semantics_s, directly or indirectly.)
// It should not refer to StateLemmas_i, Lemmas_i, or Print_s,
// because they refer to Semantics_s.
// Regs_i and State_i are ok, because they do not refer to Semantics_s.

open X64.Machine_s
open X64.Vale.State_i

val cf : (flags:int) -> bool
val zf : (flags:int) -> bool

unfold let va_subscript = Map.sel
unfold let va_update = Map.upd

(* Type aliases *)
unfold let va_bool = bool
unfold let va_int = int
val ins : Type0
val ocmp : Type0
unfold let va_code = precode ins ocmp
unfold let va_codes = list va_code
unfold let va_state = state
unfold let va_operand = operand
let va_reg_operand = o:operand{OReg? o}
unfold let va_dst_operand = dst_op
unfold let va_shift_amt = operand
unfold let va_cmp = operand
unfold let va_register = reg

(* Constructors *)
unfold let va_op_operand_reg (r:reg) : va_operand = OReg r
unfold let va_const_operand (n:int) = OConst n
unfold let va_const_shift_amt (n:int) : va_shift_amt = OConst n
unfold let va_op_cmp_reg (r:reg) : va_cmp = OReg r

unfold let va_op_cmp_flags () =  0
unfold let va_const_cmp (n:int) : va_cmp = OConst n
unfold let va_coerce_register_to_operand (r:va_register) : va_operand = OReg r
unfold let va_coerce_register_to_reg_operand (r:va_register) : va_operand = OReg r
unfold let va_op_register (r:reg) : va_register = r
unfold let va_op_reg_operand_reg (r:reg) : va_reg_operand = OReg r
unfold let va_op_dst_operand_reg (r:reg{not (Rsp? r)}) : va_dst_operand = OReg r
unfold let va_coerce_operand_to_dst_operand (o:va_operand{valid_dst o}) : va_dst_operand = o
unfold let va_coerce_dst_operand_to_operand (o:va_dst_operand) : va_operand = o

(* Predicates *)
unfold let va_is_src_operand_uint64 (o:operand) (s:va_state) = valid_operand o s
unfold let va_is_dst_operand_uint64 (o:operand) (s:va_state) = valid_dst o
unfold let va_is_dst_dst_operand_uint64 (o:va_dst_operand) (s:va_state) = valid_operand o s
unfold let va_is_src_register_int (r:reg) (s:va_state) = True
unfold let va_is_src_register_uint64 (r:reg) (s:va_state) = True

unfold let va_is_dst_register (r:reg) (s:va_state) = True
unfold let va_is_src_shift_amt_uint64 (o:operand) (s:va_state) = True
unfold let va_is_src_reg_operand_uint64 (o:operand) (s:va_state) = OReg? o
unfold let valid_src_addr (m:mem) (addr:int) : bool = m `Map.contains` addr
unfold let valid_dst_addr (m:mem) (addr:int) : bool = m `Map.contains` addr 

(* Getters *)
unfold let va_get_ok (s:va_state) : bool = s.ok
unfold let va_get_flags (s:va_state) : int = s.flags
unfold let va_get_reg (r:reg) (s:va_state) : nat64 = eval_reg r s
unfold let va_get_mem (s:va_state) : mem = s.mem
unfold let get_reg (o:va_reg_operand) : reg = OReg?.r o

(* Framing: va_update_foo means the two states are the same except for foo *)
unfold let va_update_ok (sM:va_state) (sK:va_state) : va_state  = { sK with ok = sM.ok }
unfold let va_update_flags  (sM:va_state) (sK:va_state) : va_state  = { sK with flags = sM.flags }

unfold
let va_update_reg (r:reg) (sM:va_state) (sK:va_state) : va_state =
  update_reg r (eval_reg r sM) sK

unfold let va_update_mem (sM:va_state) (sK:va_state) : va_state = { sK with mem = sM.mem }

let va_update_operand (o:operand) (sM:va_state) (sK:va_state) : va_state =
  match o with
  | OConst n -> sK
  | OReg r -> va_update_reg r sM sK
  | OMem m -> va_update_mem sM sK 

unfold
let va_update_dst_operand (o:dst_op) (sM:va_state) (sK:va_state) : va_state =
  va_update_operand o sM sK   

unfold
let va_update_register (r:reg) (sM:va_state) (sK:va_state) : va_state =
  va_update_reg r sM sK

(* Evaluation *)
unfold let va_eval_operand_uint64     (s:va_state) (o:va_operand)     : nat64 = eval_operand o s
unfold let va_eval_dst_operand_uint64 (s:va_state) (o:va_dst_operand) : nat64 = eval_operand o s
unfold let va_eval_shift_amt_uint64   (s:va_state) (o:va_shift_amt)   : nat64 = eval_operand o s
unfold let va_eval_cmp_uint64         (s:va_state) (r:va_cmp)         : nat64 = eval_operand r s
unfold let va_eval_register_uint64    (s:va_state) (r:va_register)    : nat64 = eval_reg r s
unfold let va_eval_register_int    (s:va_state) (r:va_register)    : nat64 = eval_reg r s
unfold let va_eval_reg_operand_uint64 (s:va_state) (o:va_reg_operand) : nat64 = eval_reg (OReg?.r o) s

(** Constructors for va_codes *)
unfold let va_CNil () : va_codes = []
unfold let va_CCons (hd:va_code) (tl:va_codes) : va_codes = hd::tl

(** Constructors for va_code *)
unfold let va_Block (block:va_codes) : va_code = Block block
unfold let va_IfElse (ifCond:ocmp) (ifTrue:va_code) (ifFalse:va_code) : va_code = IfElse ifCond ifTrue ifFalse
unfold let va_While (whileCond:ocmp) (whileBody:va_code) (inv:operand) : va_code = While whileCond whileBody inv

val va_cmp_eq (o1:va_operand) (o2:va_operand) : ocmp
val va_cmp_ne (o1:va_operand) (o2:va_operand) : ocmp
val va_cmp_le (o1:va_operand) (o2:va_operand) : ocmp
val va_cmp_ge (o1:va_operand) (o2:va_operand) : ocmp
val va_cmp_lt (o1:va_operand) (o2:va_operand) : ocmp
val va_cmp_gt (o1:va_operand) (o2:va_operand) : ocmp
val va_cmp_zf (o1:nat64) :ocmp
val va_cmp_cf (o1:nat64): ocmp

unfold let va_get_block (c:va_code{Block? c}) : va_codes = Block?.block c
unfold let va_get_ifCond (c:va_code{IfElse? c}) : ocmp = IfElse?.ifCond c
unfold let va_get_ifTrue (c:va_code{IfElse? c}) : va_code = IfElse?.ifTrue c
unfold let va_get_ifFalse (c:va_code{IfElse? c}) : va_code = IfElse?.ifFalse c
unfold let va_get_whileCond (c:va_code{While? c}) : ocmp = While?.whileCond c
unfold let va_get_whileBody (c:va_code{While? c}) : va_code = While?.whileBody c

(* ok for now but no need to actually expose the definition.
   instead expose lemmas about it *)
let va_state_eq (s0:va_state) (s1:va_state) : Type0 = state_eq s0 s1

val va_eval_code : (c:va_code) -> (s:va_state) -> option va_state

let va_require (block:va_codes) (c:va_code) (s0:va_state) (s1:va_state) : Type0 =
  Cons? block /\
  Cons?.hd block == c /\
  Some s1 == va_eval_code (va_Block block) s0

let va_ensure (b0:va_codes) (b1:va_codes) (s0:va_state) (s1:va_state) (sN:va_state) : Type0 =
  Cons? b0 /\
  Cons?.tl b0 == b1 /\
  Some s1 == va_eval_code (Cons?.hd b0) s0 /\
  Some sN  == va_eval_code (va_Block b1) s1

val eval_ocmp : s:va_state -> c:ocmp -> GTot bool

val lemma_cmp_eq : s:va_state -> o1:va_operand -> o2:va_operand -> Lemma
  (requires True)
  (ensures  (eval_ocmp s (va_cmp_eq o1 o2)) <==> (va_eval_operand_uint64 s o1 == va_eval_operand_uint64 s o2))
  [SMTPat (eval_ocmp s (va_cmp_eq o1 o2))]

val lemma_cmp_ne : s:va_state -> o1:va_operand -> o2:va_operand -> Lemma
  (requires True)
  (ensures  (eval_ocmp s (va_cmp_ne o1 o2)) <==> (va_eval_operand_uint64 s o1 <> va_eval_operand_uint64 s o2))
  [SMTPat (eval_ocmp s (va_cmp_ne o1 o2))]

val lemma_cmp_le : s:va_state -> o1:va_operand -> o2:va_operand -> Lemma
  (requires True)
  (ensures  (eval_ocmp s (va_cmp_le o1 o2)) <==> (va_eval_operand_uint64 s o1 <= va_eval_operand_uint64 s o2))
  [SMTPat (eval_ocmp s (va_cmp_le o1 o2))]

val lemma_cmp_ge : s:va_state -> o1:va_operand -> o2:va_operand -> Lemma
  (requires True)
  (ensures  (eval_ocmp s (va_cmp_ge o1 o2)) <==> (va_eval_operand_uint64 s o1 >= va_eval_operand_uint64 s o2))
  [SMTPat (eval_ocmp s (va_cmp_ge o1 o2))]

val lemma_cmp_lt : s:va_state -> o1:va_operand -> o2:va_operand -> Lemma
  (requires True)
  (ensures  (eval_ocmp s (va_cmp_lt o1 o2)) <==> (va_eval_operand_uint64 s o1 < va_eval_operand_uint64 s o2))
  [SMTPat (eval_ocmp s (va_cmp_lt o1 o2))]

val lemma_cmp_gt : s:va_state -> o1:va_operand -> o2:va_operand -> Lemma
  (requires True)
  (ensures  (eval_ocmp s (va_cmp_gt o1 o2)) <==> (va_eval_operand_uint64 s o1 > va_eval_operand_uint64 s o2))
  [SMTPat (eval_ocmp s (va_cmp_gt o1 o2))]

val va_lemma_block : (b0:va_codes) -> (s0:va_state) -> (sN:va_state) ->
  Ghost (va_state * va_code * va_codes)
  (requires (Cons? b0 /\ Some sN == va_eval_code (va_Block b0) s0))
  (ensures  (fun (s1, c_1, b1) ->
    b0 == va_CCons c_1 b1 /\
    Some s1 == va_eval_code c_1 s0 /\
    Some sN == va_eval_code (va_Block b1) s1))

val va_lemma_empty : (s0:va_state) -> (sN:va_state) -> Ghost va_state
  (requires (Some sN == va_eval_code (va_Block (va_CNil ())) s0))
  (ensures  (fun sM -> sM == s0 /\ sM == sN))

val va_lemma_ifElse : ifb:ocmp -> ct:va_code -> cf:va_code -> s0:va_state -> sN:va_state -> Ghost (bool * va_state)
  (requires (Some sN == va_eval_code (IfElse ifb ct cf) s0))
  (ensures  (fun (cond, sM) ->
    cond == eval_ocmp s0 ifb /\
    sM == s0 /\
    Some sN == (if cond then va_eval_code ct sM else va_eval_code cf sM)))

(* maybe we want these to be transparent*)
val logxor64 : (x:nat64) -> (y:nat64) -> nat64
val logand64 : (x:nat64) -> (y:nat64) -> nat64
val shift_left64 : (x:nat64) -> (amt:nat64) -> nat64
val shift_right64 : (x:nat64) -> (amt:nat64) -> nat64

val printer : Type0
val print_string : string -> FStar.All.ML unit
val print_header : printer -> FStar.All.ML unit
val print_proc : (name:string) -> (code:va_code) -> (label:int) -> (p:printer) -> FStar.All.ML unit
val print_footer : printer -> FStar.All.ML unit
val masm : printer
val gcc : printer
#endverbatim

#verbatim implementation
module X64.Vale.Decls
open X64.Machine_s
open X64.Vale
open X64.Vale.State_i
open X64.Vale.StateLemmas_i
open FStar.UInt
module S = X64.Semantics_s
module P = X64.Print_s

#reset-options "--initial_fuel 2 --max_fuel 2"

let cf = Lemmas_i.cf
let zf = Lemmas_i.zf
let ins = S.ins
type ocmp = S.ocmp

let va_cmp_eq o1 o2 = S.OEq o1 o2
let va_cmp_ne o1 o2 = S.ONe o1 o2
let va_cmp_le o1 o2 = S.OLe o1 o2
let va_cmp_ge o1 o2 = S.OGe o1 o2
let va_cmp_lt o1 o2 = S.OLt o1 o2
let va_cmp_gt o1 o2 = S.OGt o1 o2


let va_cmp_zf o1 = S.OCf 
let va_cmp_cf o1 = S.OZf

let va_eval_code = Lemmas_i.eval_code
let eval_ocmp = Lemmas_i.eval_ocmp

let lemma_cmp_eq s o1 o2 = ()
let lemma_cmp_ne s o1 o2 = ()
let lemma_cmp_le s o1 o2 = ()
let lemma_cmp_ge s o1 o2 = ()
let lemma_cmp_lt s o1 o2 = ()
let lemma_cmp_gt s o1 o2 = ()

let va_lemma_block = Lemmas_i.lemma_block
let va_lemma_empty = Lemmas_i.lemma_empty
let va_lemma_ifElse = Lemmas_i.lemma_ifElse

let logxor64 (x:nat64) (y:nat64) : nat64 =
  S.logxor x y

let logand64 (x:nat64) (y:nat64) : nat64 =
  S.logand x y

let shift_left64 (x:nat64) (amt:nat64) : nat64 =
  S.shift_left x amt

let shift_right64 (x:nat64) (amt:nat64) : nat64 =
  S.shift_right x amt

let printer = P.printer
let print_string = FStar.IO.print_string
let print_header = P.print_header
let print_proc = P.print_proc
let print_footer = P.print_footer
let masm = P.masm
let gcc = P.gcc

#set-options "--initial_fuel 2 --max_fuel 2 --z3rlimit 20"
#endverbatim

var{:state ok()} ok:bool;
var{:state reg(Rax)} rax:int;
var{:state reg(Rbx)} rbx:int;
var{:state reg(Rcx)} rcx:int;
var{:state reg(Rdx)} rdx:int;
var{:state reg(Rsi)} rsi:int;
var{:state reg(Rdi)} rdi:int;
var{:state reg(Rbp)} rbp:int;
var{:state reg(Rsp)} rsp:int;
var{:state reg(R8)}  r8:int;
var{:state reg(R9)}  r9:int;
var{:state reg(R10)} r10:int;
var{:state reg(R11)} r11:int;
var{:state reg(R12)} r12:int;
var{:state reg(R13)} r13:int;
var{:state reg(R14)} r14:int;
var{:state reg(R15)} r15:int;
var{:state reg(Rip)} rip:int;
var{:state flags()} efl:int;
var{:state mem()} mem:int;

procedure{:instruction Ins(S.Mov64(dst,src))} Mov64(inout dst_operand dst:uint64, operand src:uint64)
    ensures
        dst == old(src);
{
}

//procedure{:instruction Ins(S.Jump(dst))} JumpShort(operand dst:uint64)
//    requires
//      true;
//    modifies
//      rip;
//    ensures
//      rip == dst;
//{
//}

procedure{:instuction Ins(S.Bt64(src, pos))} Bt64(operand src:uint64, operand pos:uint64)
      modifies
        efl;
      ensures
        // logand64(shift_right64(src, pos), 1) == (if cf(efl) then 1 else 0);
       true;
{
    
} 

procedure{:instruction Ins(S.Mov64(dst, OMem(MReg(get_reg(src), offset))))} Load64(
    out dst_operand dst:uint64,
        reg_operand src:uint64,
        inline offset:int)
    reads
        mem;
    requires
        valid_src_addr(mem, old(src) + offset);
    ensures
        dst == mem[old(src) + offset];
{
}

procedure{:instruction Ins(S.Mov64(OMem(MReg(get_reg(dst), offset)), src))} Store64(
        reg_operand dst:uint64,
        operand src:uint64,
        inline offset:int)
    modifies
        mem;
    requires
        valid_dst_addr(mem, dst + offset);
    ensures
        mem == old(mem)[old(dst + offset) := src];
{
    assert Map.equal(mem, old(mem)[old(dst + offset) := src]);
}

procedure{:instruction Ins(S.Add64(dst,src))} Add64(inout dst_operand dst:uint64, operand src:uint64)
    modifies
        efl;
    requires
        src + dst < nat64_max;
    ensures
        eq_int(dst, old(dst + src));
{
}

procedure{:instruction Ins(S.Add64(dst,src))} Add64Wrap(inout dst_operand dst:uint64, operand src:uint64)
    modifies
        efl;
    ensures
        dst == old(add_wrap(dst, src));
        cf(efl) == old(dst + src >= nat64_max);
{
}

procedure{:instruction Ins(S.AddLea64(dst, src1, src2))} AddLea64(out dst_operand dst:uint64, operand src1:uint64, operand src2:uint64)
    requires
        src1 + src2 < nat64_max;
    ensures
        eq_int(dst, old(src1) + old(src2));
{
}

procedure{:instruction Ins(S.AddCarry64(dst, src))} Adc64Wrap(inout dst_operand dst:uint64, operand src:uint64)
    modifies
        efl;
    ensures
        dst == old(add_wrap(add_wrap(dst, src), (if cf(efl) then 1 else 0)));
        cf(efl) == old(dst + src + (if cf(efl) then 1 else 0)) >= nat64_max;
{
}

procedure{:instruction Ins(S.Sub64(dst, src))} Sub64(inout dst_operand dst:uint64, operand src:uint64)
    requires
        0 <= dst - src;
    modifies 
        efl;
    ensures
        eq_int(dst, old(dst) - old(src));
{
}

procedure{:instruction Ins(S.Sub64(dst, src))} Sub64Wrap(inout dst_operand dst:uint64, operand src:uint64)
    modifies
        efl;
    ensures
        dst == old(dst - src) % nat64_max;
{
}

procedure{:instruction Ins(S.Mul64(src))} Mul64Wrap(operand src:uint64)
    modifies
        efl;
        rax;
        rdx;
    ensures
        nat64_max * rdx + rax == old(rax * src);
{
}

#verbatim
#reset-options "--z3cliopt smt.arith.nl=true --initial_fuel 2 --max_fuel 2 --z3rlimit 20"
#endverbatim
procedure{:instruction Ins(S.IMul64(dst, src))} IMul64(inout dst_operand dst:uint64, operand src:uint64)
    requires
        dst * src < nat64_max;
    modifies
        efl;
    ensures
        eq_int(dst, (old(dst * src)));
{
}
#verbatim
#reset-options "--initial_fuel 2 --max_fuel 2 --z3rlimit 20"
#endverbatim

procedure{:instruction Ins(S.Xor64(dst, src))} Xor64(inout dst_operand dst:uint64, operand src:uint64)
    modifies 
        efl;
    ensures
        dst == old(logxor64(dst,src));
{
}

procedure{:instruction Ins(S.And64(dst, src))} And64(inout dst_operand dst:uint64, operand src:uint64)
    modifies 
        efl;
    ensures
        dst == old(logand64(dst,src));
{
}

procedure{:instruction Ins(S.Shl64(dst, amt))} Shl64(inout dst_operand dst:uint64, shift_amt amt:uint64)
    modifies
        efl;
//    requires
//        0 <= src < 64;
    ensures
        dst == old(shift_left64(dst, amt));
{
}

procedure{:instruction Ins(S.Shr64(dst, amt))} Shr64(inout dst_operand dst:uint64, shift_amt amt:uint64)
    modifies
        efl;
    ensures
        dst == old(shift_right64(dst, amt));
{
}
