include "../../../arch/x64/X64.Vale.InsBasic.vaf"
include "../../../arch/x64/X64.Vale.InsMem.vaf"
include "../../../arch/x64/X64.Vale.InsVector.vaf"

module X64.Util

#verbatim{:interface}{:implementation}
open Words_s
open Types_s
open Types_i
open X64.Machine_s
open X64.Memory_i
open X64.Vale.State_i
open X64.Vale.Decls_i
open X64.Vale.InsBasic
open X64.Vale.InsMem
open X64.Vale.InsVector
open X64.Vale.InsAes
open X64.Vale.QuickCode_i
open X64.Vale.QuickCodes_i
#endverbatim

#reset-options "--z3rlimit 30"

procedure {:quick} zero_quad32_buffer(ghost b:buffer128)
    requires/ensures
        buffer_readable(mem, b);
        buffer_length(b) == 1;
        rdi == buffer_addr(b, mem);
    ensures
        rbx == old(rbx);
        rbp == old(rbp);
        r12 == old(r12);
        r13 == old(r13);
        r14 == old(r14);
        r15 == old(r15);

        modifies_buffer128(b, old(mem), mem);
        buffer128_read(b, 0, mem) == Mkfour(0, 0, 0, 0);
    modifies
        rax; rbx; rcx; rdx; rsi; rdi; rbp; rsp; r8; r9; r10; r11; r12; r13; r14; r15;
        xmm0; xmm1; xmm2; xmm3; xmm4; xmm5; xmm6; xmm7; xmm8; xmm9; xmm10; xmm11; xmm12; xmm13; xmm14; xmm15;
        efl; mem;
{
        ZeroXmm(xmm1);
        Store128_buffer(rdi, xmm1, 0, b, 0);
}


procedure {:quick} mk_quad32_lo0_be_1_buffer(ghost b:buffer128)
    requires
        buffer_readable(mem, b);
        buffer_length(b) == 1;
        rdi == buffer_addr(b, mem);
    ensures
        rbx == old(rbx);
        rbp == old(rbp);
        r12 == old(r12);
        r13 == old(r13);
        r14 == old(r14);
        r15 == old(r15);

        modifies_buffer128(b, old(mem), mem);
        let old_b := buffer128_read(b, 0, old(mem));
        let new_b := buffer128_read(b, 0, mem);
        new_b == Mkfour (1, old_b.lo1, old_b.hi2, old_b.hi3);
    modifies
        rax; rbx; rcx; rdx; rsi; rdi; rbp; rsp; r8; r9; r10; r11; r12; r13; r14; r15;
        xmm0; xmm1; xmm2; xmm3; xmm4; xmm5; xmm6; xmm7; xmm8; xmm9; xmm10; xmm11; xmm12; xmm13; xmm14; xmm15;
        efl; mem;
{
     Load128_buffer(xmm1, rdi, 0, b, 0);
     PinsrdImm(xmm1, 1, 0, rax);
     Store128_buffer(rdi, xmm1, 0, b, 0);

}

procedure {:quick} quad32_xor_buffer(
  ghost src1:buffer128,
  ghost src2:buffer128,
  ghost dst:buffer128)
    requires
        locs_disjoint(list(loc_buffer(src1), loc_buffer(src2), loc_buffer(dst)));
        buffer_readable(mem, src1);
        buffer_readable(mem, src2);
        buffer_readable(mem, dst);
        rdi == buffer_addr(src1, mem);
        rsi == buffer_addr(src2, mem);
        rdx == buffer_addr(dst, mem);
        buffer_length(src1) == 1;
        buffer_length(src2) == 1;
        buffer_length(dst) == 1;        
   ensures
        rbx == old(rbx);
        rbp == old(rbp);
        r12 == old(r12);
        r13 == old(r13);
        r14 == old(r14);
        r15 == old(r15);

        modifies_buffer128(dst, old(mem), mem);
        buffer128_read(dst, 0, mem) == quad32_xor(buffer128_read(src1, 0, old(mem)), buffer128_read(src2, 0, old(mem)));
    modifies
        rax; rbx; rcx; rdx; rsi; rdi; rbp; rsp; r8; r9; r10; r11; r12; r13; r14; r15;
        xmm0; xmm1; xmm2; xmm3; xmm4; xmm5; xmm6; xmm7; xmm8; xmm9; xmm10; xmm11; xmm12; xmm13; xmm14; xmm15;
        efl; mem;
{
        Load128_buffer(xmm1, rdi, 0, src1, 0);
        Load128_buffer(xmm2, rsi, 0, src2, 0);
        Pxor(xmm1, xmm2);
        Store128_buffer(rdx, xmm1, 0, dst, 0);
}
