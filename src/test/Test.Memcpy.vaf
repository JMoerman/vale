include "../arch/x64/X64.Vale.Decls.vaf"

#verbatim interface implementation
module Test.Memcpy
open X64.Machine_s
open X64.Vale.State_i
open X64.Vale.Decls
#set-options "--z3rlimit 20"
#endverbatim

procedure Copy64()
    requires/ensures
        rsi + 64 <= rdi;
        forall i {Map.contains(mem, i)}:: rsi <= i && i < rsi + 64 && (i - rsi) % 8 == 0 ==> Map.contains(mem, i);
        forall i {Map.contains(mem, i)}:: rdi <= i && i < rdi + 64 && (i - rdi) % 8 == 0 ==> Map.contains(mem, i);
    ensures
        forall i :: 0 <= i && i < 64 && i % 8 == 0 ==> mem[rdi + i] == mem[rsi + i];
    reads
        rsi; rdi;
    modifies
        rax; rbx; rcx; rdx; rbp;
        mem;
{
    Load64(rax, rsi, 0);
    Load64(rbx, rsi, 8);
    Load64(rcx, rsi, 16);
    Load64(rdx, rsi, 24);
    Load64(rbp, rsi, 32);
    Store64(rdi, rax, 0);
    Store64(rdi, rbx, 8);
    Store64(rdi, rcx, 16);
    Store64(rdi, rdx, 24);
    Store64(rdi, rbp, 32);
    Load64(rax, rsi, 40);
    Load64(rbx, rsi, 48);
    Load64(rcx, rsi, 56);
    Store64(rdi, rax, 40);
    Store64(rdi, rbx, 48);
    Store64(rdi, rcx, 56);
}

procedure Copy128()
    requires/ensures
        rsi + 128 <= rdi;
        forall i {Map.contains(mem, i)}:: rsi <= i && i < rsi + 128 && (i - rsi) % 8 == 0 ==> Map.contains(mem, i);
        forall i {Map.contains(mem, i)}:: rdi <= i && i < rdi + 128 && (i - rdi) % 8 == 0 ==> Map.contains(mem, i);
    ensures
        forall i :: 0 <= i && i < 128 && i % 8 == 0 ==> mem[rdi + i] == mem[rsi + i];
    reads
        rsi; rdi;
    modifies
        rax; rbx; rcx; rdx; rbp;
        mem;
{
    Load64(rax, rsi, 0);
    Load64(rbx, rsi, 8);
    Load64(rcx, rsi, 16);
    Load64(rdx, rsi, 24);
    Load64(rbp, rsi, 32);
    Store64(rdi, rax, 0);
    Store64(rdi, rbx, 8);
    Store64(rdi, rcx, 16);
    Store64(rdi, rdx, 24);
    Store64(rdi, rbp, 32);
    Load64(rax, rsi, 40);
    Load64(rbx, rsi, 48);
    Load64(rcx, rsi, 56);
    Load64(rdx, rsi, 64);
    Load64(rbp, rsi, 72);
    Store64(rdi, rax, 40);
    Store64(rdi, rbx, 48);
    Store64(rdi, rcx, 56);
    Store64(rdi, rdx, 64);
    Store64(rdi, rbp, 72);
    Load64(rax, rsi, 80);
    Load64(rbx, rsi, 88);
    Load64(rcx, rsi, 96);
    Load64(rdx, rsi, 104);
    Load64(rbp, rsi, 112);
    Store64(rdi, rax, 80);
    Store64(rdi, rbx, 88);
    Store64(rdi, rcx, 96);
    Store64(rdi, rdx, 104);
    Store64(rdi, rbp, 112);
    Load64(rax, rsi, 120);
    Store64(rdi, rax, 120);
}
