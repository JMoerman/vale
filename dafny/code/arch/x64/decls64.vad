include{:verbatim} "vale.dfy"
include{:verbatim} "vale64.dfy"
include{:verbatim}{:from BASE} "code/lib/util/operations.dfy"
include "decls.vad"

#verbatim
module x64_decls64
{
import opened x64_def
import opened x64_vale
import opened x64_vale64
import opened x64_decls
import opened operations
#endverbatim

procedure Mem_in(in base:opr, inline offset:int) returns(o:mem)
    {:operand}
    reads
        mem;
    extern;

procedure Add64Wrap(inout dst:opr64, in src:mem64)
    {:instruction Ins(Add64(dst, src))}
    modifies
        efl;
    ensures
        dst == old(BitwiseAdd64(dst, src));
        Cf(efl) == old(dst + src >= 0x1_0000_0000_0000_0000);
{
    reveal evalCodeOpaque;
    reveal x86_ValidState;
    reveal BitwiseAdd64;
//
//    this := MaybeUpdateOk(old(this), this);
//    ghost if (!this.ok)
//    {
//        this := this.(regs := this.regs[@dst.r := 0]);
//    }
}

procedure Load64(out dst:opr64, in src:opr64, inline offset:int)
    {:instruction Ins(Mov64(dst, MakeHeapOp(src, offset)))}
    reads
        mem;
    requires
        ValidSrcAddr(mem, src + offset, 64);
    ensures
        ValidSrcAddr(mem, old(src) + offset, 64);
        dst == mem[old(src) + offset].v64;
{
    reveal evalCodeOpaque;
    reveal x86_ValidState;
//
//    this := MaybeUpdateOk(old(this), this);
//    ghost if (!this.ok)
//    {
//        this := this.(regs := this.regs[@dst.r := 0]);
//    }
}

procedure Store64(in dst:opr64, in src:opr64, inline offset:int)
    {:instruction Ins(Mov64(MakeHeapOp(dst, offset), src))}
    modifies
        mem;
    requires/ensures
        ValidDstAddr(mem, dst + offset, 64);
    ensures
        mem == old(mem)[dst + offset := Mem64(src)];
{
    reveal evalCodeOpaque;
    reveal x86_ValidState;
//    let v := old(src);
//    this := MaybeUpdateOk(old(this), this);
}

procedure AddLea64(out dst:opr64, in src1:opr64, in src2:opr64)
    {:instruction Ins(AddLea64(dst, src1, src2))}
    requires
        src1 + src2 < 0x1_0000_0000_0000_0000;
    ensures
        dst == old(src1) + old(src2);
{
    reveal evalCodeOpaque;
    reveal x86_ValidState;
//    this := MaybeUpdateOk(old(this), this);
}

procedure Sub64(inout dst:opr64, in src:opr64)
    {:instruction Ins(Sub64(dst, src))}
    requires
        0 <= dst - src;
    modifies
        efl;
    ensures
        dst == old(dst) - old(src);
{
    reveal evalCodeOpaque;
    reveal x86_ValidState;
//    this := MaybeUpdateOk(old(this), this);
}

procedure Sub64Wrap(inout dst:opr64, in src:opr64)
    {:instruction Ins(Sub64(dst, src))}
    modifies
        efl;
    ensures
        dst == old(BitwiseSub64(dst, src));
{
    reveal evalCodeOpaque;
    reveal x86_ValidState;
    reveal BitwiseSub64;
//    this := MaybeUpdateOk(old(this), this);
}

procedure Adc64Wrap(inout dst:opr64, in src:mem64)
    {:instruction Ins(AddCarry64(dst, src))}
    modifies
        efl;
    ensures
        dst == old(BitwiseAdd64(BitwiseAdd64(dst, src), if Cf(efl) then 1 else 0));
        Cf(efl) == old(dst + src + (if Cf(efl) then 1 else 0) >= 0x1_0000_0000_0000_0000);
{
    reveal evalCodeOpaque;
    reveal x86_ValidState;
    reveal BitwiseAdd64;
//    this := MaybeUpdateOk(old(this), this);
//
    lemma_BitwiseAdd64EquivalentToAddMod2To64(old(dst), old(src));
}

procedure IMul64Wrap(inout dst:opr64, in src:opr64)
    {:instruction Ins(IMul64(dst, src))}
    modifies
        efl;
    ensures
        dst == old(BitwiseMul64(dst, src));
{
    reveal evalCodeOpaque;
    reveal x86_ValidState;
    reveal BitwiseMul64;
    reveal BitwiseMul64hi;
//    this := MaybeUpdateOk(old(this), this);
}

procedure Mul64Wrap(in src:opr64)
    {:instruction Ins(Mul64(src))}
    modifies
        efl;
        rax;
        rdx;
    ensures
        rax == old(BitwiseMul64(rax, src));
        rdx == old(BitwiseMul64hi(rax, src));
{
    reveal evalCodeOpaque;
    reveal x86_ValidState;
    reveal BitwiseMul64;
    reveal BitwiseMul64hi;
//    this := MaybeUpdateOk(old(this), this);
}

procedure And64(inout dst:opr64, in src:opr64)
    {:instruction Ins(And64(dst, src))}
    modifies
        efl;
    ensures
        dst == old(BitwiseAnd64(dst, src));
{
    reveal evalCodeOpaque;
    reveal x86_ValidState;
//    this := MaybeUpdateOk(old(this), this);
}

procedure Shl64(inout dst:opr64, in src:shift64)
    {:instruction Ins(Shl64(dst, src))}
    modifies
        efl;
    requires
        0 <= src < 64;
    ensures
        dst == old(BitwiseShl64(dst, src));
{
    reveal evalCodeOpaque;
    reveal x86_ValidState;
//    this := MaybeUpdateOk(old(this), this);
}

procedure Shr64(inout dst:opr64, in src:shift64)
    {:instruction Ins(Shr64(dst, src))}
    modifies
        efl;
    requires
        0 <= src < 64;
    ensures
        dst == old(BitwiseShr64(dst, src));
{
    reveal evalCodeOpaque;
    reveal x86_ValidState;
//    this := MaybeUpdateOk(old(this), this);
}

#verbatim
} // end module
#endverbatim
