include{:verbatim} "vale.dfy"

#verbatim
module ARM_decls {
import opened ARM_decls_ARM_vale = ARM_vale
#endverbatim

type state:Type(0) {:primitive} extern;
type uint32:Type(0) := int_range(0, 0xffff_ffff);
type seq(a:Type(0)):Type(0) {:primitive} extern;
type map(a:Type(0), b:Type(0)):Type(0) extern;
type global:Type(0) extern;
type mementry:Type(0) extern;
type memmap:Type(0) := map(int, mementry);
type Shift:Type(0) extern;
function operator([]) #[a:Type(0)](s:seq(a), i:int):a extern; // TODO: requires clause
function operator([ := ]) #[a:Type(0)](s:seq(a), i:int, v:a):seq(a) extern; // TODO: requires clause
function operator([]) #[a:Type(0), b:Type(0)](m:map(a, b), key:a):b extern; // TODO: requires clause
function operator([ := ]) #[a:Type(0), b:Type(0)](m:map(a, b), key:a, v:b):map(a, b) extern;
function MemEntry(v:uint32):mementry extern;
function operator(.v) (m:mementry):uint32 extern;
function operator(.ok) (s:state):bool extern;
function operator(.ok :=) (s:state, b:bool):state extern;
function WordAligned(i:int):bool extern;
function WordsToBytes(w:int):int extern;
function BytesToWords(b:int):int extern;
function ValidAddr(m:memmap, addr:int):bool extern;
function ValidSrcAddr(m:memmap, addr:int):bool extern;
function ValidGlobal(g:global):bool extern;
function AddressOfGlobal(g:global):int extern;
function ValidGlobalsAddr(globals:map(global, seq(uint32)), g:global, addr:int):bool extern;
function EvalShift(w:uint32, shift:Shift):uint32 extern;
function BitwiseAnd(x:uint32, y:uint32):uint32 extern;
function BitwiseXor(x:uint32, y:uint32):uint32 extern;
function BitwiseAdd32(x:uint32, y:uint32):uint32 extern;

var ok:bool {:state ok()};
var mem:memmap {:state mem()};
var globals:map(global, seq(uint32)) {:state globals()};
var sp:uint32 {:state osp()};
var lr:uint32 {:state olr()};

var r0:uint32 {:state reg(R0)};
var r1:uint32 {:state reg(R1)};
var r2:uint32 {:state reg(R2)};
var r3:uint32 {:state reg(R3)};
var r4:uint32 {:state reg(R4)};
var r5:uint32 {:state reg(R5)};
var r6:uint32 {:state reg(R6)};
var r7:uint32 {:state reg(R7)};
var r8:uint32 {:state reg(R8)};
var r9:uint32 {:state reg(R9)};
var r10:uint32{:state reg(R10)};
var r11:uint32{:state reg(R11)};
var r12:uint32{:state reg(R12)};

operand_type opr_snd:uint32 :=
| inout r0 | inout r1 | inout r2 | inout r3
| inout r4 | inout r5 | inout r6 | inout r7
| inout r8 | inout r9 | inout r10 | inout r11
| inout r12
;
operand_type opr_reg:uint32 := opr_snd | in sp | in lr;
operand_type opr32:uint32 := opr_reg | const;

procedure rLDR(out rd:opr32, in base:opr32, in ofs:opr32)
    {:instruction Ins(LDR(rd, base, ofs))}
    requires
        ValidSrcAddr(mem, base + ofs);
    reads mem;
    ensures
        ValidSrcAddr(mem, old(base + ofs));
        rd == mem[old(base + ofs)].v;
{
    reveal eval_code;
    reveal ValidRegState;
    reveal ValidMemState;
}

procedure rLDRglobaladdr(out rd:opr32, inline g:global)
    {:instruction Ins(LDR_reloc(rd, g))}
    requires ValidGlobal(g);
    ensures
        rd == AddressOfGlobal(g);
{
    reveal eval_code;
    reveal ValidRegState;
    reveal ValidMemState;
}

#verbatim

predicate ValidGlobals(globals:map<global, seq<uint32>>)
{
      (forall g :: g in TheGlobalDecls() <==> g in globals)
   && (forall g :: g in TheGlobalDecls()
        ==> |globals[g]| == BytesToWords(TheGlobalDecls()[g]))
}
predicate ValidGlobalsAddr(globals:map<global, seq<uint32>>, g:global, addr:int)
{
    ValidGlobals(globals)
 && ValidGlobal(g) && WordAligned(addr)
 && AddressOfGlobal(g) <= addr < AddressOfGlobal(g) + SizeOfGlobal(g)
}
#endverbatim

procedure rLDRglobal(out rd:opr32, inline g:global,
          in base:opr32, in ofs:opr32)
    {:instruction Ins(LDR_global(rd, g, base, ofs))}
    requires
        ValidGlobalsAddr(globals, g, base + ofs);
    reads
        globals;
    ensures
        ValidGlobalsAddr(globals, g, old(base + ofs));
        rd == globals[g][BytesToWords(old(base + ofs) - AddressOfGlobal(g))];
{
    reveal eval_code;
    reveal ValidRegState;
    reveal ValidMemState;
}

procedure rSTR(in rd:opr_reg, in base:opr32, in ofs:opr32)
    {:instruction Ins(STR(rd, base, ofs))}
    requires
        ValidAddr(mem, base + ofs);
    ensures
        ValidSrcAddr(mem, base + ofs);
        forall(addr:int){ValidAddr(mem, addr)} ValidAddr(old(mem), addr) ==> ValidAddr(mem, addr);
    modifies
        mem;
    ensures
        mem == old(mem)[old(base+ofs) := MemEntry(rd)];
{
    reveal eval_code;
    reveal ValidRegState;
    reveal ValidMemState;
}

procedure rMOV(out dst:opr32, in src:opr32)
    {:instruction Ins(MOV(dst, src))}
    ensures
        dst == old(src);
{
    reveal eval_code;
    reveal ValidRegState;
    reveal ValidMemState;
}

procedure rMOVShift(out dst:opr32, in src:opr_snd, inline shift:Shift)
    {:instruction Ins(MOV(dst, OShift(GetProbableReg(src), shift)))}
    ensures
        dst == old(EvalShift(old(src), shift));
{
    reveal eval_code;
    reveal ValidRegState;
    reveal ValidMemState;
}

procedure rEOR(out dst:opr32, in src1:opr32, in src2:opr32)
    {:instruction Ins(EOR(dst, src1, src2))}
    ensures
        dst == BitwiseXor(old(src1), old(src2));
{
    reveal eval_code;
    reveal ValidRegState;
    reveal ValidMemState;
}

procedure rEORShift(out dst:opr32, in src1:opr32, in src2:opr_snd, inline shift:Shift)
    {:instruction Ins(EOR(dst, src1, OShift(GetProbableReg(src2), shift)))} 
    ensures
        dst == BitwiseXor(old(src1), EvalShift(old(src2), shift));
{
    reveal eval_code;
    reveal ValidRegState;
    reveal ValidMemState;
}

procedure rADD(out dst:opr32, in src1:opr32, in src2:opr32)
    {:instruction Ins(ADD(dst, src1, src2))}
    requires
        src1 + src2 < 0x1_0000_0000;
    ensures
        dst == old(src1 + src2);
{
    reveal eval_code;
    reveal ValidRegState;
    reveal ValidMemState;
}

procedure rSUB(out dst:opr32, in src1:opr32, in src2:opr32)
    {:instruction Ins(SUB(dst, src1, src2))}
    requires
        src1 - src2 >= 0;
    ensures
        dst == old(src1 - src2);
{
    reveal eval_code;
    reveal ValidRegState;
    reveal ValidMemState;
}

procedure rADDWrap(out dst:opr32, in src1:opr32, in src2:opr32)
    {:instruction Ins(ADD(dst, src1, src2))}
    ensures
        dst == BitwiseAdd32(old(src1), old(src2));
{
    reveal eval_code;
    reveal ValidRegState;
    reveal ValidMemState;
    reveal BitwiseAdd32;
}

procedure rADDWrapShift(out dst:opr32, in src1:opr32, in src2:opr_snd, inline shift:Shift)
    {:instruction Ins(ADD(dst, src1, OShift(GetProbableReg(src2), shift)))}
    ensures
        dst == BitwiseAdd32(old(src1), EvalShift(old(src2), shift));
{
    reveal eval_code;
    reveal ValidRegState;
    reveal ValidMemState;
    reveal BitwiseAdd32;
}

procedure rAND(out dst:opr32, in src1:opr32, in src2:opr32)
    {:instruction Ins(AND(dst, src1, src2))}
    ensures
        dst == old(BitwiseAnd(src1, src2));
{
    reveal eval_code;
    reveal ValidRegState;
    reveal ValidMemState;
}

#verbatim
} // end module ARMdecls
#endverbatim

